import {writeFile, BaseCommand} from '../lib'
import {flags} from '@oclif/command'

const QUERY = `{
  getGQLSchema {
    schema
    generatedSchema
  }
}`

export default class GetSchema extends BaseCommand {
  static description = 'Fetch the schema from your backend'

  static examples = [
    '$ slash-graphql get-schema -e https://frozen-mango.cloud.dgraph.io/graphql -t <apiToken>',
    '$ slash-graphql get-schema -e 0x42',
    '$ slash-graphql get-schema -e https://frozen-mango.cloud.dgraph.io/graphql -t <apiToken> -g',
  ]

  static flags = {
    ...BaseCommand.commonFlags,
    ...BaseCommand.endpointFlags,
    'generated-schema': flags.boolean({char: 'g', description: 'Fetch the full schema generated by Slash GraphQL', default: false}),
  }

  static args = [{name: 'file', description: 'Output File', default: '/dev/stdout'}]

  async run() {
    const opts = this.parse(GetSchema)
    const backend = await this.backendFromOpts(opts)
    const {errors, data} = await backend.adminQuery<{getGQLSchema: {schema: string; generatedSchema: string}}>(QUERY)
    if (errors) {
      for (const {message} of errors) {
        this.error(message)
      }
    }
    const schema = opts.flags['generated-schema'] ? data.getGQLSchema.generatedSchema : data.getGQLSchema.schema
    await writeFile(opts.args.file, schema)
  }
}
